2023-12-26 17:29:07,349{GMT}	INFO	[jepsen test runner] jepsen.core: Test version e39f4f4149770f141c0fd2c62e1ca38490ac92e4 (plus uncommitted changes)
2023-12-26 17:29:07,350{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin ../target/debug/dist-sys count 1 --time-limit 2
2023-12-26 17:29:07,374{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args ["count" "1"]
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count nil
 :availability nil
 :max-txn-length 4
 :concurrency 5
 :db
 #object[maelstrom.db$db$reify__16142
         "0x7dd4f726"
         "maelstrom.db$db$reify__16142@7dd4f726"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0xbf6de66" "2023-12-26T17:29:07.319+03:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0xff7042c"
         "maelstrom.net$jepsen_net$reify__15251@ff7042c"]
 :client
 #object[maelstrom.workload.echo$client$reify__16863
         "0xb917b5e"
         "maelstrom.workload.echo$client$reify__16863@b917b5e"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x5126c0cd"
         "java.util.concurrent.CyclicBarrier@5126c0cd"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x6c1e2161"
         "jepsen.checker$compose$reify__11881@6c1e2161"]
 :argv
 ("test"
  "-w"
  "echo"
  "--bin"
  "../target/debug/dist-sys"
  "count"
  "1"
  "--time-limit"
  "2")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@5b7f9eaa"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@5b344510"]})
 :nodes ["n1" "n2" "n3" "n4" "n5"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "../target/debug/dist-sys"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 2000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x460222eb"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@460222eb"],
                   :gen nil})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x2b960c2b"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@2b960c2b"],
                   :gen (jepsen.generator.Stagger
                         {:dt 400000000,
                          :next-time nil,
                          :gen (jepsen.generator.EachThread
                                {:fresh-gen #object[maelstrom.workload.echo$workload$fn__16882
                                                    "0x46f32536"
                                                    "maelstrom.workload.echo$workload$fn__16882@46f32536"],
                                 :context-filters #object[clojure.core$promise$reify__8591
                                                          "0x3ee39a1c"
                                                          {:status :pending,
                                                           :val nil}],
                                 :gens {}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x6921e251"
         "maelstrom.net$jepsen_os$reify__15254@6921e251"]
 :time-limit 2
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2023-12-26 17:29:08,295{GMT}	INFO	[jepsen node n1] maelstrom.net: Starting Maelstrom network
2023-12-26 17:29:08,296{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2023-12-26 17:29:08,297{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2023-12-26 17:29:08,297{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2023-12-26 17:29:08,297{GMT}	INFO	[jepsen node n3] maelstrom.db: Setting up n3
2023-12-26 17:29:08,297{GMT}	INFO	[jepsen node n4] maelstrom.db: Setting up n4
2023-12-26 17:29:08,298{GMT}	INFO	[jepsen node n5] maelstrom.db: Setting up n5
2023-12-26 17:29:08,298{GMT}	INFO	[jepsen node n2] maelstrom.process: launching ../target/debug/dist-sys ["count" "1"]
2023-12-26 17:29:08,298{GMT}	INFO	[jepsen node n3] maelstrom.process: launching ../target/debug/dist-sys ["count" "1"]
2023-12-26 17:29:08,298{GMT}	INFO	[jepsen node n4] maelstrom.process: launching ../target/debug/dist-sys ["count" "1"]
2023-12-26 17:29:08,298{GMT}	INFO	[jepsen node n5] maelstrom.process: launching ../target/debug/dist-sys ["count" "1"]
2023-12-26 17:29:08,299{GMT}	INFO	[jepsen node n1] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2023-12-26 17:29:08,301{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2023-12-26 17:29:08,302{GMT}	INFO	[jepsen node n1] maelstrom.process: launching ../target/debug/dist-sys ["count" "1"]
2023-12-26 17:29:08,323{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2023-12-26 17:29:08,335{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 86"
2023-12-26 17:29:08,338{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :msg_id 0, :in_reply_to 1, :echo "Please echo 86"}
2023-12-26 17:29:08,440{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 113"
2023-12-26 17:29:08,441{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:echo	{:type "echo_ok", :msg_id 0, :in_reply_to 1, :echo "Please echo 113"}
2023-12-26 17:29:08,680{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 4"
2023-12-26 17:29:08,684{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :msg_id 1, :in_reply_to 2, :echo "Please echo 4"}
2023-12-26 17:29:09,010{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 1"
2023-12-26 17:29:09,014{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:echo	{:type "echo_ok", :msg_id 0, :in_reply_to 1, :echo "Please echo 1"}
2023-12-26 17:29:09,346{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 92"
2023-12-26 17:29:09,349{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:echo	{:type "echo_ok", :msg_id 1, :in_reply_to 2, :echo "Please echo 92"}
2023-12-26 17:29:09,457{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 71"
2023-12-26 17:29:09,461{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :msg_id 0, :in_reply_to 1, :echo "Please echo 71"}
2023-12-26 17:29:09,698{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:echo	"Please echo 84"
2023-12-26 17:29:09,702{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:echo	{:type "echo_ok", :msg_id 0, :in_reply_to 1, :echo "Please echo 84"}
2023-12-26 17:29:10,074{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:echo	"Please echo 108"
2023-12-26 17:29:10,077{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:echo	{:type "echo_ok", :msg_id 1, :in_reply_to 2, :echo "Please echo 108"}
2023-12-26 17:29:10,162{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 4"
2023-12-26 17:29:10,165{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:echo	{:type "echo_ok", :msg_id 1, :in_reply_to 2, :echo "Please echo 4"}
2023-12-26 17:29:10,194{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 68"
2023-12-26 17:29:10,195{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:echo	{:type "echo_ok", :msg_id 2, :in_reply_to 3, :echo "Please echo 68"}
2023-12-26 17:29:10,210{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2023-12-26 17:29:10,239{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2023-12-26 17:29:10,239{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2023-12-26 17:29:10,239{GMT}	INFO	[jepsen node n3] maelstrom.db: Tearing down n3
2023-12-26 17:29:10,239{GMT}	INFO	[jepsen node n5] maelstrom.db: Tearing down n5
2023-12-26 17:29:10,239{GMT}	INFO	[jepsen node n4] maelstrom.db: Tearing down n4
2023-12-26 17:29:11,316{GMT}	INFO	[jepsen node n1] maelstrom.net: Shutting down Maelstrom network
2023-12-26 17:29:11,319{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2023-12-26 17:29:12,067{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2023-12-26 17:29:12,071{GMT}	INFO	[jepsen results] jepsen.store: Wrote /Volumes/work/dist-sys/maelstrom/store/echo/20231226T172907.319+0300/results.edn
2023-12-26 17:29:12,100{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true},
 :stats {:valid? true,
         :count 10,
         :ok-count 10,
         :fail-count 0,
         :info-count 0,
         :by-f {:echo {:valid? true,
                       :count 10,
                       :ok-count 10,
                       :fail-count 0,
                       :info-count 0}}},
 :availability {:valid? true, :ok-fraction 1.0},
 :net {:all {:send-count 30,
             :recv-count 30,
             :msg-count 30,
             :msgs-per-op 3.0},
       :clients {:send-count 30, :recv-count 30, :msg-count 30},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:valid? true, :errors ()},
 :valid? true}


Everything looks good! ヽ(‘ー`)ノ
